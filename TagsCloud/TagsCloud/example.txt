What is software architecture? The answer is multitiered. At the highest level, there 
are the architecture patterns that define the overall shape and structure of software 
applications
1
. Down a level is the architecture that is specifically related to the pur-
pose of the software application. Yet another level down resides the architecture of 
the modules and their interconnections. This is the domain of design patterns
2
, pack-
akges, components, and classes. It is this level that we will concern ourselves with in 
this chapter.
Our scope in this chapter is quite limitted. There is much more to be said about the 
principles and patterns that are exposed here. Interested readers are referred to 
What goes wrong with software? The design of many software applications begins as 
a vital image in the minds of its designers. At this stage it is clean, elegant, and com-
pelling. It has a simple beauty that makes the designers and implementers itch to see it 
working. Some of these applications manage to maintain this purity of design through 
the initial development and into the first release. 
But then something begins to happen. The software starts to rot. At first it isn’t so 
bad. An ugly wart here, a clumsy hack there, but the beauty of the design still shows 
through. Yet, over time as the rotting continues, the ugly festering sores and boils 
accumulate until they dominate the design of the application. The program becomes a 
festering mass of code that the developers find increasingly hard to maintain
ally the sheer effort required to make even the simplest of changes to the application 
becomes so high that the engineers and front line managers cry for a redesign project.
Such redesigns rarely succeed. Though the designers start out with good intentions, 
they find that they are shooting at a moving target. The old system continues to 
evolve and change, and the new design must keep up. The warts and ulcers accumu-
late in the new design before it ever makes it to its first release. On that fateful day, 
usually much later than planned, the morass of problems in the new design may be so 
bad that the designers are already crying for another redesign.
Symptoms of Rotting Design
There are four primary symptoms that tell us that our designs are rotting. They are not 
orthogonal, but are related to each other in ways that will become obvious. they are: 
rigidity, fragility, immobility, and viscosity.
Rigidity. 
    Rigidity is the tendency for software to be difficult to change, even in 
simple ways. Every change causes a cascade of subsequent changes in dependent 
modules. What begins as a simple two day change to one module grows into a multi-
week marathon of change in module after module as the engineers chase the thread of 
the change through the application.
When software behaves this way, managers fear to allow engineers to fix non-critical 
problems. This reluctance derives from the fact that they don’t know, with any reli-
ability, when the engineers will be finished. If the managers turn the engineers loose 
on such problems, they may disappear for long periods of time. The software design 
begins to take on some characteristics of a roach motel -- engineers check in, but they 
don’t check out.
When the manager’s fears become so acute that they refuse to allow changes to soft-
ware, official rigidity sets in. Thus, what starts as a design deficiency, winds up being 
adverse management policy.
Fragility. 
    Closely related to rigidity is fragility. Fragility is the tendency of the 
software to break in many places every time it is changed. Often the breakage occurs 
in areas that have no conceptual relationship with the area that was changed. Such 
errors fill the hearts of managers with foreboding. Every time they authorize a fix, 
they fear that the software will break in some unexpected way.
As the fragility becomes worse, the probability of breakage increases with time, 
asymptotically approaching 1. Such software is impossible to maintain. Every fix 
makes it worse, introducing more problems than are solved.
Such software causes managers and customers to suspect that the developers have lost 
control of their software. Distrust reigns, and credibility is lost.
Immobility. 
    Immobility is the inability to reuse software from other projects or 
from parts of the same project. It often happens that one engineer will discover that he 
needs a module that is similar to one that another engineer wrote. However, it also 
often happens that the module in question has too much baggage that it depends upon. 
After much work, the engineers discover that the work and risk required to separate 
the desirable parts of the software from the undesirable parts are too great to tolerate. 
And so the software is simply rewritten instead of reused.
Viscosity. 
    Viscosity comes in two forms: viscosity of the design, and viscosity of 
the environment. When faced with a change, engineers usually find more than one 
way to make the change. Some of the ways preserve the design, others do not (i.e. 
they are hacks.) When the design preserving methods are harder to employ than the 
hacks, then the viscosity of the design is high. It is easy to do the wrong thing, but 
hard to do the right thing. 
Viscosity of environment comes about when the development environment is slow 
and inefficient. For example, if compile times are very long, engineers will be 
tempted to make changes that don’t force large recompiles, even though those 
changes are not optiimal from a design point of view. If the source code control sys-
tem requires hours to check in just a few files, then engineers will be tempted to make 
changes that require as few check-ins as possible, regardless of whether the design is 
preserved.
These four symptoms are the tell-tale signs of poor architecture. Any application that 
exhibits them is suffering from a design that is rotting from the inside out. But what 
causes that rot to take place?
Changing Requirements
The immediate cause of the degradation of the design is well understood. The require-
ments have been changing in ways that the initial design did not anticipate. Often 
these changes need to be made quickly, and may be made by engineers who are not 
familiar with the original design philosophy. So, though the change to the design 
works, it somehow violates the original design. Bit by bit, as the changes continue to 
pour in, these violations accumulate until malignancy sets in. 
However, we cannot blame the drifting of the requirements for the degradation of the 
design. We, as software engineers, know full well that requirements change. Indeed, 
most of us realize that the requirements document is the most volatile document in the 
Robert C. Martin
Copyright (c) 2000 by Robert C. Martin. All Rights Reserved
.
www.objectmentor.com
4
project. If our designs are failing due to the constant rain of changing requirements, it 
is our designs that are at fault. We must somehow find a way to make our designs 
resilient to such changes and protect them from rotting.
Dependency Management
What kind of changes cause designs to rot? Changes that introduce new and 
unplanned for dependencies. Each of the four symptoms mentioned above is either 
directly, or indirectly caused by improper dependencies between the modules of the 
software. It is the dependency architecture that is degrading, and with it the ability of 
the software to be maintained.
In order to forestall the degradation of the dependency architecture, the dependencies 
between modules in an application must be managed. This management consists of 
the creation of dependency firewalls. Accross such firewalls, dependencies do not 
propogate.
Object Oriented Design is replete with principles and techniques for building such 
firewalls, and for managing module dependencies. It is these principles and tech-
niques that will be discussed in the remainder of this chapter. First we will examine 
the principles, and then the techniques, or design patterns, that help maintain the 
dependency architecture of an application.
Robert C. Martin
Copyright (c) 2000 by Robert C. Martin. All Rights Reserved
.
www.objectmentor.com
15
Figure 2-19 shows a class with many clients, and one large interface to serve them all. 
Note that whenever a change is made to one of the methods that 
ClientA
 calls, 
ClientB
 and 
ClientC
 may be affected. It may be necessary to recompile and 
redeploy them. This is unfortunate.
A better technique is shown in Figure 2-20. The methods needed by each client are 
placed in special interfaces that are specific to that client. Those interfaces are multi-
ply inherited by the 
Service
 class, and implemented there.
If the interface for 
ClientA
 needs to change, 
ClientB
 and 
ClientC
 will remain 
unaffected. They will not have to be recompiled or redeployed.
What does Client Specific Mean? 
    The ISP does not recommend that every 
class that uses a service have its own special interface class that the service must 
inherit from. If that were the case, the service would depend upon each and every cli-
ent in a bizarre and unhealthy way. Rather, clients should be categorized by their 
type, and interfaces for each type of client should be created.
If two or more different client types need the same method, the method should be 
added to both of their interfaces. This is neither harmful nor confusing to the client.
Changing Interfaces. 
    When object oriented applications are maintained, the 
interfaces to existing classes and components often change. There are times when 
these changes have a huge impact and force the recompilation and redeployment of a 
very large part of the design. This impact can be mitigated by adding new interfaces 
to existing objects, rather than changing the existing interface. 
must verify that they work with the new package -- even if nothing they used 
within the package actually changed.
We frequently experience this when our OS vendor releases a new operating system. 
We have to upgrade sooner or later, because the vendor will not support the old ver-
sion forever. So even though nothing of interest to us changed in the new release, we 
must go through the effort of upgrading and revalidating.
The same can happen with packages if classes that are not used together are grouped 
together. Changes to a class that I don’t care about will still force a new release of the 
package, and still cause me to go through the effort of upgrading and revalidating.
Tension between the Package Cohesion Principles
These three principles are mutually exclusive. They cannot simultaneously be satis-
fied. That is because each principle benefits a different group of people. The REP and 
CRP makes life easy for reusers, whereas the CCP makes life easier for maintainers. 
The CCP strives to make packages as large as possible (after all, if all the classes live 
in just one package, then only one package will ever change). The CRP, however, 
tries to make packages very small. 
Fortunately, packages are not fixed in stone. Indeed, it is the nature of packages to 
shift and jitter during the course of development. Early in a project, architects may set 
up the package structure such that CCP dominates and develoipment and maintenance 
is aided. Later, as the architecture stabilizes, the architects may refactor the package 
structure to maximize REP and CRP for the external reusers.
The Package Coupling Principles.
The next three packages govern the interlationships between packages. Applications 
tend to be large networks of interlated packages. The rules that govern these interrela-
tionship are some of the most important rules in object oriented architecture.
We can envision the packages structure of our application as a set of interconnected 
packages with instable packages at the top, and stable packages on the bottom. In this 
view, all dependencies point downwards.
Those packages at the top are instable and flexible. But those at the bottom are very 
difficult to change. And this leads us to a dilemma: Do we want packages in our 
design that are hard to change?
Clearly, the more packages that are hard to change, the less flexible our overall design 
will be. However, there is a loophole we can crawl through. The highly stable pack-
ages at the bottom of the dependency network may be very difficult to change, but 
according to the OCP they do not have to be difficult to extend!
If the stable packages at the bottom are also highly abstract, then they can be easily 
extended. This means that it is possible to compose our application from instable 
packages that are easy to change, and stable packages that are easy to extend. This is a 
good thing.
Thus, the SAP is just a restatement of the DIP. It states the packages that are the most 
depended upon (i.e. stable) should also be the most abstract. But how do we meaure 
abstractness?